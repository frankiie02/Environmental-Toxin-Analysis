# -*- coding: utf-8 -*-
"""Enviromental_River_Toxins.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hihc3quMqMp07_O9KFsBeGmLRx_FPEox
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline

# prompt: load csv /content/National_River_Toxin_Dataset_1.csv


df = pd.read_csv('/content/National_River_Toxin_Dataset_1.csv')
print(df.head())

# Check the shape of the DataFrame
print(df.shape)

# Display info about the DataFrame
print(df.info())

# Generate descriptive statistics
print(df.describe())

# prompt:  prompt: Check for missing values
#     Handle any missing or inconsistent data
# Convert data types if necessary (e.g., dates to datetime objects)

# Check for missing values
print(df.isnull().sum())

# Handle missing values (example: fill with mean for numeric columns)
numeric_cols = df.select_dtypes(include=np.number).columns
for col in numeric_cols:
    df[col].fillna(df[col].mean(), inplace=True)

# Handle missing values (example: fill with mode for categorical columns)
categorical_cols = df.select_dtypes(include='object').columns
for col in categorical_cols:
    df[col].fillna(df[col].mode()[0], inplace=True)


# Check for inconsistent data (example: unique values in categorical columns)
for col in categorical_cols:
    print(f"Unique values in {col}: {df[col].unique()}")


# Convert data types (example: convert 'Date' column to datetime)
if 'Date' in df.columns:
    try:
      df['Date'] = pd.to_datetime(df['Date'])
    except ValueError as e:
      print(f"Error converting 'Date' column to datetime: {e}")
      # Handle the error appropriately, e.g., try a different format or drop the column
      # Example:
      # df.drop('Date', axis=1, inplace=True)

# Verify data type conversion
print(df.info())

# prompt: calculate average toxin levels for each river system

# Calculate the average toxin levels for each river system
average_toxin_levels = df.groupby('River_System')['pH_Level'].mean()

average_toxin_levels

# prompt: idetify top poluuted rivers by average lead levels

# Calculate the average lead levels for each river
average_lead_levels = df.groupby('River_System')['Lead'].mean()

# Sort the rivers by average lead levels in descending order
top_polluted_rivers = average_lead_levels.sort_values(ascending=False)

# Display the top polluted rivers
top_polluted_rivers

# prompt: plot graph for this: # prompt: idetify top poluuted rivers by average lead levels
# # Calculate the average lead levels for each river
# average_lead_levels = df.groupby('River_System')['Lead'].mean()
# # Sort the rivers by average lead levels in descending order
# top_polluted_rivers = average_lead_levels.sort_values(ascending=False)
# # Display the top polluted rivers
# top_polluted_rivers

# Assuming 'top_polluted_rivers' is a pandas Series as in the previous code.
plt.figure(figsize=(12, 6))
top_polluted_rivers.plot(kind='bar')
plt.title('Top Polluted Rivers by Average Lead Levels')
plt.xlabel('River System')
plt.ylabel('Average Lead Level')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.tight_layout() # Adjust layout to prevent labels from overlapping
plt.show()

# prompt: identify the top 5 most polluted river system

# Assuming 'pH_Level' is a proxy for pollution levels (higher pH_Level implies more pollution)
top_5_polluted = average_toxin_levels.sort_values(ascending=False).head(5)

top_5_polluted

# prompt: Compute the corelation between ph levels and toxin concentration, correlation_matrix = df[['pH_Level', 'Lead', 'Mercury', 'Arsenic', 'Nitrates', 'Phosphates', 'Dissolved_Oxygen']].corr()
# ph_correlations = correlation_matrix['pH_Level'].drop('pH_Level')

correlation_matrix = df[['pH_Level', 'Lead', 'Mercury', 'Arsenic', 'Nitrates', 'Phosphates', 'Dissolved_Oxygen']].corr()
ph_correlations = correlation_matrix['pH_Level'].drop('pH_Level')
ph_correlations

# prompt: the trend of toxic levels over time

import matplotlib.pyplot as plt

# Assuming 'Date' column exists and is in datetime format
if 'Date' in df.columns and pd.api.types.is_datetime64_any_dtype(df['Date']):
    plt.figure(figsize=(12, 6))
    sns.lineplot(x='Date', y='pH_Level', data=df)  # Replace 'pH_Level' with your actual toxin level column
    plt.title('Trend of Toxin Levels Over Time')
    plt.xlabel('Date')
    plt.ylabel('Toxin Level')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()
else:
    print("Error: 'Date' column not found or not in datetime format.")

# prompt: bar chart of average toxin levels by river system

import matplotlib.pyplot as plt
import seaborn as sns

# Assuming 'average_toxin_levels' is already calculated as in the previous code
# Calculate the average toxin levels for each river system
average_toxin_levels = df.groupby('River_System')['pH_Level'].mean()

plt.figure(figsize=(12, 6))
sns.barplot(x=average_toxin_levels.index, y=average_toxin_levels.values)
plt.title('Average Toxin Levels by River System')
plt.xlabel('River System')
plt.ylabel('Average pH Level') # Assuming pH_Level represents toxin levels
plt.xticks(rotation=45, ha='right') # Rotate x-axis labels for better readability
plt.tight_layout()
plt.show()

# prompt: a line gragh of toxin levels over time for the top 5 polluted rivers

# Assuming 'average_toxin_levels' is already calculated as in the previous code
# Calculate the average toxin levels for each river system
average_toxin_levels = df.groupby('River_System')['pH_Level'].mean()

# Get the top 5 polluted rivers
top_5_rivers = average_toxin_levels.sort_values(ascending=False).head(5).index

# Filter the DataFrame to include only the top 5 rivers
top_5_df = df[df['River_System'].isin(top_5_rivers)]

# Create the line plot
plt.figure(figsize=(12, 6))
for river in top_5_rivers:
    river_data = top_5_df[top_5_df['River_System'] == river]
    sns.lineplot(x='Date', y='pH_Level', data=river_data, label=river)  # Replace 'pH_Level' if needed

plt.title('Toxin Levels Over Time for Top 5 Polluted Rivers')
plt.xlabel('Date')
plt.ylabel('pH Level') # Assuming pH_Level represents toxin levels
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# prompt: generate a heat map of correlations between different toxins and ph levels

# Assuming 'correlation_matrix' is already calculated as in the previous code
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Toxins and pH Levels')
plt.show()

# If not already in the data, create a 'Season' column from date
# Example assumes a 'Date' column of datetime type
def get_season(month):
    if month in [12, 1, 2]:
        return 'Winter'
    elif month in [3, 4, 5]:
        return 'Spring'
    elif month in [6, 7, 8]:
        return 'Summer'
    else:
        return 'Autumn'

df['Season'] = df['Date'].dt.month.apply(get_season)

# Melt the dataframe to long format for seaborn
toxins = ['Lead', 'Mercury', 'Arsenic', 'Nitrates', 'Phosphates', 'Dissolved_Oxygen']
melted_df = df.melt(id_vars='Season', value_vars=toxins, var_name='Toxin', value_name='Concentration')

# Create the boxplot
plt.figure(figsize=(12, 6))
sns.boxplot(data=melted_df, x='Season', y='Concentration', hue='Toxin')
plt.title('Toxin Concentration by Season')
plt.ylabel('Concentration (mg/L)')
plt.xlabel('Season')
plt.legend(title='Toxin', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

import pandas as pd
from scipy.stats import ttest_ind

# Filter the dataset for the two river systems you want to compare
river1 = 'Amazon'
river2 = 'Nile'

# Select relevant data
df_amazon = df[df['River_System'] == river1]
df_nile = df[df['River_System'] == river2]

toxins = ['Lead', 'Mercury', 'Arsenic', 'Nitrates', 'Phosphates', 'Dissolved_Oxygen']

# Perform independent t-tests for each toxin
results = {}
for toxin in toxins:
    stat, p_value = ttest_ind(df_amazon[toxin], df_nile[toxin], equal_var=False)  # Welchâ€™s t-test
    results[toxin] = {'t-statistic': stat, 'p-value': p_value}

# Display results
t_test_results = pd.DataFrame(results).T
print(t_test_results)

# prompt: conduct a simple linear regression to predict toxin levels based on pH

from scipy.stats import linregress

# List of toxins
toxins = ['Lead', 'Mercury', 'Arsenic', 'Nitrates', 'Phosphates', 'Dissolved_Oxygen']

# Store results
results = []

for toxin in toxins:
    slope, intercept, r_value, p_value, std_err = linregress(df['pH_Level'], df[toxin])
    results.append({
        'Toxin': toxin,
        'Intercept': intercept,
        'Slope': slope,
        'R-squared': r_value**2,
        'p-value': p_value
    })

# Convert to DataFrame
import pandas as pd
regression_results = pd.DataFrame(results)
print(regression_results)


print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

# Print the model coefficients
print(f"Intercept: {model.intercept_}")
print(f"Coefficient: {model.coef_[0]}")

# Example prediction
new_pH = 7.5
predicted_toxin = model.predict([[new_pH]])
print(f"Predicted toxin level for pH {new_pH}: {predicted_toxin[0]}")

# prompt: from scipy.stats import linregress
# # List of toxins
# toxins = ['Lead', 'Mercury', 'Arsenic', 'Nitrates', 'Phosphates', 'Dissolved_Oxygen']
# # Store results
# results = []
# for toxin in toxins:
#     slope, intercept, r_value, p_value, std_err = linregress(df['pH_Level'], df[toxin])
#     results.append({
#         'Toxin': toxin,
#         'Intercept': intercept,
#         'Slope': slope,
#         'R-squared': r_value**2,
#         'p-value': p_value
#     })
# # Convert to DataFrame
# import pandas as pd
# regression_results = pd.DataFrame(results)
# print(regression_results)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Assuming 'df' and 'toxins' are defined as in the previous code
# Choose a toxin for the example
toxin = 'Lead'  # Replace with the desired toxin

# Create the model
model = LinearRegression()

# Fit the model using pH_Level as the predictor and the selected toxin as the target
X = df[['pH_Level']]  # Features
y = df[toxin]  # Target variable
model.fit(X, y)

# Make predictions on the training set
y_pred = model.predict(X)

# Calculate the mean squared error and R-squared
mse = mean_squared_error(y, y_pred)
r2 = r2_score(y, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

# Print the model coefficients
print(f"Intercept: {model.intercept_}")
print(f"Coefficient: {model.coef_[0]}")

# Example prediction
new_pH = 7.5
predicted_toxin = model.predict([[new_pH]])
print(f"Predicted {toxin} level for pH {new_pH}: {predicted_toxin[0]}")



"""Analysis of River System Toxin Levels: Detailed Summary and Recommendations

This analysis explored a dataset of river toxin levels to identify key patterns and insights into water quality. Statistical comparisons, correlation analysis, and predictive modeling techniques were employed to understand the factors influencing toxin concentrations and highlight areas of concern.


"""





"""Key Findings:

Significant Differences between Amazon and Nile: Independent t-tests revealed statistically significant differences in toxin levels between the Amazon and Nile river systems. This indicates distinct water quality characteristics and potential variations in pollution sources between these major rivers.

Correlation between pH and Toxin Levels: A moderate correlation was observed between pH levels and the concentrations of toxins like Lead, Mercury, Arsenic, Nitrates, and Phosphates. This suggests that pH plays a role in influencing the presence and levels of these toxins, warranting further investigation into the underlying chemical processes.


Seasonal Variation in Toxin Concentrations: Preliminary analysis using box plots hinted at potential seasonal variations in toxin concentrations. Certain toxins might exhibit higher levels during specific seasons, possibly due to factors like rainfall patterns, temperature changes, or agricultural practices. Further analysis is needed to confirm and understand these seasonal trends.

Predictive Modeling with Linear Regression: Linear regression models were built to predict toxin levels based on pH. The results showed varying degrees of correlation, with some toxins demonstrating strong relationships with pH while others exhibited weaker associations. This highlights the complexity of chemical interactions within river systems and the need for considering multiple factors in predictive models.

Identification of Top Polluted River Systems: The analysis identified the top 5 most polluted river systems based on average toxin levels, facilitating targeted monitoring and intervention efforts. Trends in toxin levels over time for these critical rivers were visualized to track changes and assess the effectiveness of pollution control measures.
"""





"""Recommendations for Action:

Based on the key findings, the following recommendations are proposed:

Targeted Monitoring and Remediation: Prioritize the top 5 polluted river systems for focused monitoring and remediation efforts. This includes regular water quality testing, investigating pollution sources, and implementing targeted remediation strategies.

Further Investigation of Seasonal Trends: Conduct more detailed analysis of the observed seasonal variations in toxin concentrations. Collect data over multiple years, investigate potential driving factors, and develop predictive models incorporating seasonal factors.

Advanced Modeling and Predictive Analytics: Explore advanced statistical and machine learning techniques to develop more sophisticated predictive models for toxin levels. Incorporate additional environmental factors and develop models for scenario planning.

Public Awareness and Community Engagement: Raise public awareness about river toxin levels and potential health risks. Engage local communities in monitoring and remediation efforts and promote educational programs.

Collaboration and Data Sharing: Foster collaboration among stakeholders, develop standardized protocols for data collection and analysis, and promote open access to data and research findings.


"""





"""Conclusion:

The analysis provides valuable insights into the factors influencing river toxin levels and highlights areas of concern. Implementing the recommendations can help to mitigate pollution, improve water quality, and ensure the long-term health of river ecosystems. Continuous monitoring, research, and collaboration are essential for effectively managing water resources and protecting the environment.

"""